From 8470af23067e97ee7411f95df2484eb49de2d546 Mon Sep 17 00:00:00 2001
From: Anton Baskanov <baskanov@gmail.com>
Date: Tue, 6 Feb 2024 20:59:57 +0700
Subject: [PATCH 11/27] win32u, explorer: Restore display settings on process
 exit.

Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=49674
---
 dlls/user32/tests/monitor.c |  48 +++++++--------
 dlls/win32u/sysparams.c     |  15 +++++
 programs/explorer/desktop.c | 114 +++++++++++++++++++++++++++++++++---
 3 files changed, 145 insertions(+), 32 deletions(-)

diff --git a/dlls/user32/tests/monitor.c b/dlls/user32/tests/monitor.c
index 601aa81b29b0..40a97bc60009 100644
--- a/dlls/user32/tests/monitor.c
+++ b/dlls/user32/tests/monitor.c
@@ -294,8 +294,8 @@ struct device_info
     DEVMODEA original_mode;
 };
 
-#define expect_dm(a, b, c, d) _expect_dm(__LINE__, a, b, c, d)
-static void _expect_dm(INT line, const DEVMODEA *expected, const CHAR *device, DWORD test, BOOL todo)
+#define expect_dm(a, b, c) _expect_dm(__LINE__, a, b, c)
+static void _expect_dm(INT line, const DEVMODEA *expected, const CHAR *device, DWORD test)
 {
     DEVMODEA dm;
     BOOL ret;
@@ -310,9 +310,9 @@ static void _expect_dm(INT line, const DEVMODEA *expected, const CHAR *device, D
             "Device %s test %ld expect dmFields to contain %#lx, got %#lx\n", device, test, expected->dmFields, dm.dmFields);
     ok_(__FILE__, line)(!(expected->dmFields & DM_BITSPERPEL) || dm.dmBitsPerPel == expected->dmBitsPerPel,
             "Device %s test %ld expect dmBitsPerPel %lu, got %lu\n", device, test, expected->dmBitsPerPel, dm.dmBitsPerPel);
-    todo_wine_if(todo) ok_(__FILE__, line)(!(expected->dmFields & DM_PELSWIDTH) || dm.dmPelsWidth == expected->dmPelsWidth,
+    ok_(__FILE__, line)(!(expected->dmFields & DM_PELSWIDTH) || dm.dmPelsWidth == expected->dmPelsWidth,
             "Device %s test %ld expect dmPelsWidth %lu, got %lu\n", device, test, expected->dmPelsWidth, dm.dmPelsWidth);
-    todo_wine_if(todo) ok_(__FILE__, line)(!(expected->dmFields & DM_PELSHEIGHT) || dm.dmPelsHeight == expected->dmPelsHeight,
+    ok_(__FILE__, line)(!(expected->dmFields & DM_PELSHEIGHT) || dm.dmPelsHeight == expected->dmPelsHeight,
             "Device %s test %ld expect dmPelsHeight %lu, got %lu\n", device, test, expected->dmPelsHeight, dm.dmPelsHeight);
     ok_(__FILE__, line)(!(expected->dmFields & DM_POSITION) || dm.dmPosition.x == expected->dmPosition.x,
             "Device %s test %ld expect dmPosition.x %ld, got %ld\n", device, test, expected->dmPosition.x, dm.dmPosition.x);
@@ -328,8 +328,8 @@ static void _expect_dm(INT line, const DEVMODEA *expected, const CHAR *device, D
             dm.dmDisplayOrientation);
 }
 
-#define wait_for_dm(a, b, c, d) wait_for_dm_(__LINE__, a, b, c, d)
-static void wait_for_dm_(int line, const char *device, DWORD expectedWidth, DWORD expectedHeight, BOOL todo)
+#define wait_for_dm(a, b, c) wait_for_dm_(__LINE__, a, b, c)
+static void wait_for_dm_(int line, const char *device, DWORD expectedWidth, DWORD expectedHeight)
 {
     DEVMODEA dm;
     BOOL ret;
@@ -351,9 +351,9 @@ static void wait_for_dm_(int line, const char *device, DWORD expectedWidth, DWOR
         Sleep(100);
     }
 
-    todo_wine_if(todo) ok_(__FILE__, line)(dm.dmPelsWidth == expectedWidth,
+    ok_(__FILE__, line)(dm.dmPelsWidth == expectedWidth,
             "Device %s expect dmPelsWidth %lu, got %lu\n", device, expectedWidth, dm.dmPelsWidth);
-    todo_wine_if(todo) ok_(__FILE__, line)(dm.dmPelsHeight == expectedHeight,
+    ok_(__FILE__, line)(dm.dmPelsHeight == expectedHeight,
             "Device %s expect dmPelsHeight %lu, got %lu\n", device, expectedHeight, dm.dmPelsHeight);
 }
 
@@ -705,7 +705,7 @@ static void test_ChangeDisplaySettingsEx(void)
                 continue;
             }
             flush_events();
-            expect_dm(&dm3, devices[device].name, test, FALSE);
+            expect_dm(&dm3, devices[device].name, test);
 
             /* Change the registry mode to the second mode */
             res = ChangeDisplaySettingsExA(devices[device].name, &dm2, NULL, CDS_UPDATEREGISTRY | CDS_NORESET, NULL);
@@ -839,7 +839,7 @@ static void test_ChangeDisplaySettingsEx(void)
             }
 
             flush_events();
-            expect_dm(&dm, devices[device].name, mode, FALSE);
+            expect_dm(&dm, devices[device].name, mode);
         }
 
         /* Restore settings */
@@ -912,7 +912,7 @@ static void test_ChangeDisplaySettingsEx(void)
         }
 
         flush_events();
-        expect_dm(&dm, devices[device].name, 0, FALSE);
+        expect_dm(&dm, devices[device].name, 0);
 
         /* Test specifying only position, width and height */
         memset(&dm, 0, sizeof(dm));
@@ -957,7 +957,7 @@ static void test_ChangeDisplaySettingsEx(void)
         ok(dm.dmBitsPerPel, "Expected dmBitsPerPel not zero.\n");
         ok(dm.dmDisplayFrequency, "Expected dmDisplayFrequency not zero.\n");
 
-        expect_dm(&dm, devices[device].name, 0, FALSE);
+        expect_dm(&dm, devices[device].name, 0);
     }
 
     /* Test dmPosition */
@@ -1029,7 +1029,7 @@ static void test_ChangeDisplaySettingsEx(void)
             ok(res == DISP_CHANGE_SUCCESSFUL, "ChangeDisplaySettingsExA %s returned unexpected %ld\n", devices[1].name, res);
 
             dm2.dmPosition.x = dm.dmPosition.x + dm.dmPelsWidth;
-            expect_dm(&dm2, devices[1].name, 0, FALSE);
+            expect_dm(&dm2, devices[1].name, 0);
 
             /* Test placing the secondary adapter to all sides of the primary adapter */
             for (test = 0; test < 8; ++test)
@@ -1088,7 +1088,7 @@ static void test_ChangeDisplaySettingsEx(void)
                 }
 
                 flush_events();
-                expect_dm(&dm2, devices[1].name, test, FALSE);
+                expect_dm(&dm2, devices[1].name, test);
             }
 
             /* Test automatic position update when other adapters change resolution */
@@ -1153,7 +1153,7 @@ static void test_ChangeDisplaySettingsEx(void)
             ok(res == DISP_CHANGE_SUCCESSFUL, "ChangeDisplaySettingsExA %s mode %d returned unexpected %ld.\n",
                     devices[device].name, mode, res);
             flush_events();
-            expect_dm(&dm2, devices[device].name, mode, FALSE);
+            expect_dm(&dm2, devices[device].name, mode);
 
             /* EnumDisplaySettingsEx without EDS_ROTATEDMODE reports modes with current orientation */
             memset(&dm3, 0, sizeof(dm3));
@@ -1199,7 +1199,7 @@ static void test_ChangeDisplaySettingsEx(void)
             broken(res == DISP_CHANGE_FAILED), /* win8 TestBot */
             "ChangeDisplaySettingsExA returned unexpected %ld\n", res);
     for (device = 0; device < device_count; ++device)
-        expect_dm(&devices[device].original_mode, devices[device].name, 0, FALSE);
+        expect_dm(&devices[device].original_mode, devices[device].name, 0);
 
     event0 = CreateEventW(NULL, FALSE, FALSE, L"test_ChangeDisplaySettingsEx_event0");
     ok(!!event0, "OpenEventA failed, error %#lx\n", GetLastError());
@@ -1242,13 +1242,13 @@ static void test_ChangeDisplaySettingsEx(void)
     dm.dmPelsWidth = 640;
     dm.dmPelsHeight = 480;
     dm.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT;
-    expect_dm(&dm, devices[0].name, 0, FALSE);
+    expect_dm(&dm, devices[0].name, 0);
 
     SetEvent(event1);
     wait_result = WaitForSingleObject(info1.hProcess, 10000);
     ok(wait_result == WAIT_OBJECT_0, "WaitForSingleObject returned %lx.\n", wait_result);
 
-    wait_for_dm(devices[0].name, devices[0].original_mode.dmPelsWidth, devices[0].original_mode.dmPelsHeight, TRUE);
+    wait_for_dm(devices[0].name, devices[0].original_mode.dmPelsWidth, devices[0].original_mode.dmPelsHeight);
 
     CloseHandle(info1.hProcess);
     CloseHandle(info1.hThread);
@@ -1275,7 +1275,7 @@ static void test_ChangeDisplaySettingsEx(void)
     wait_result = WaitForSingleObject(info1.hProcess, 10000);
     ok(wait_result == WAIT_OBJECT_0, "WaitForSingleObject returned %lx.\n", wait_result);
 
-    wait_for_dm(devices[0].name, devices[0].original_mode.dmPelsWidth, devices[0].original_mode.dmPelsHeight, TRUE);
+    wait_for_dm(devices[0].name, devices[0].original_mode.dmPelsWidth, devices[0].original_mode.dmPelsHeight);
 
     SetEvent(event0);
     wait_result = WaitForSingleObject(info0.hProcess, 10000);
@@ -1283,7 +1283,7 @@ static void test_ChangeDisplaySettingsEx(void)
 
     Sleep(100);
 
-    expect_dm(&devices[0].original_mode, devices[0].name, 0, TRUE);
+    expect_dm(&devices[0].original_mode, devices[0].name, 0);
 
     CloseHandle(info1.hProcess);
     CloseHandle(info1.hThread);
@@ -1317,8 +1317,8 @@ static void test_ChangeDisplaySettingsEx(void)
         wait_result = WaitForSingleObject(info1.hProcess, 10000);
         ok(wait_result == WAIT_OBJECT_0, "WaitForSingleObject returned %lx.\n", wait_result);
 
-        wait_for_dm(devices[0].name, devices[0].original_mode.dmPelsWidth, devices[0].original_mode.dmPelsHeight, TRUE);
-        wait_for_dm(devices[1].name, devices[1].original_mode.dmPelsWidth, devices[1].original_mode.dmPelsHeight, TRUE);
+        wait_for_dm(devices[0].name, devices[0].original_mode.dmPelsWidth, devices[0].original_mode.dmPelsHeight);
+        wait_for_dm(devices[1].name, devices[1].original_mode.dmPelsWidth, devices[1].original_mode.dmPelsHeight);
 
         SetEvent(event0);
         wait_result = WaitForSingleObject(info0.hProcess, 10000);
@@ -1328,10 +1328,10 @@ static void test_ChangeDisplaySettingsEx(void)
 
         dm = devices[0].original_mode;
         dm.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT;
-        expect_dm(&dm, devices[0].name, 0, TRUE);
+        expect_dm(&dm, devices[0].name, 0);
         dm = devices[1].original_mode;
         dm.dmFields = DM_PELSWIDTH | DM_PELSHEIGHT;
-        expect_dm(&dm, devices[1].name, 0, TRUE);
+        expect_dm(&dm, devices[1].name, 0);
 
         CloseHandle(info1.hProcess);
         CloseHandle(info1.hThread);
diff --git a/dlls/win32u/sysparams.c b/dlls/win32u/sysparams.c
index 34cbd835cbff..672be6180b11 100644
--- a/dlls/win32u/sysparams.c
+++ b/dlls/win32u/sysparams.c
@@ -3209,12 +3209,21 @@ static BOOL all_detached_settings( const DEVMODEW *displays )
 static LONG apply_display_settings( const WCHAR *devname, const DEVMODEW *devmode,
                                     HWND hwnd, DWORD flags, void *lparam )
 {
+    static const WCHAR restorerW[] = {'_','_','w','i','n','e','_','d','i','s','p','l','a','y','_',
+                                      's','e','t','t','i','n','g','s','_','r','e','s','t','o','r','e','r',0};
+    UNICODE_STRING restoter_str = RTL_CONSTANT_STRING( restorerW );
     WCHAR primary_name[CCHDEVICENAME];
     struct display_device *primary;
+    DWORD fullscreen_process_id;
     DEVMODEW *mode, *displays;
+    DWORD restorer_thread_id;
     struct adapter *adapter;
+    HWND restorer_window;
     LONG ret;
 
+    restorer_window = NtUserFindWindowEx( NULL, NULL, &restoter_str, NULL, 0 );
+    restorer_thread_id = NtUserGetWindowThread( restorer_window, NULL );
+
     if (!lock_display_devices()) return DISP_CHANGE_FAILED;
     if (!(displays = get_display_settings( devname, devmode )))
     {
@@ -3256,6 +3265,12 @@ static LONG apply_display_settings( const WCHAR *devname, const DEVMODEW *devmod
     free( displays );
     if (ret) return ret;
 
+    if ( restorer_thread_id != GetCurrentThreadId() )
+    {
+        fullscreen_process_id = (flags & CDS_FULLSCREEN) ? GetCurrentProcessId() : 0;
+        send_message( restorer_window, WM_USER + 0, 0, fullscreen_process_id );
+    }
+
     if (!update_display_cache( TRUE ))
         WARN( "Failed to update display cache after mode change.\n" );
 
diff --git a/programs/explorer/desktop.c b/programs/explorer/desktop.c
index 65a89862190e..6ab2c8b50c17 100644
--- a/programs/explorer/desktop.c
+++ b/programs/explorer/desktop.c
@@ -611,6 +611,19 @@ static void initialize_launchers( HWND hwnd )
     }
 }
 
+static BOOL wait_named_mutex( const WCHAR *name )
+{
+    HANDLE mutex;
+
+    mutex = CreateMutexW( NULL, TRUE, name );
+    if (GetLastError() == ERROR_ALREADY_EXISTS)
+    {
+        TRACE( "waiting for mutex %s\n", debugstr_w( name ));
+        WaitForSingleObject( mutex, INFINITE );
+    }
+    return TRUE;
+}
+
 /**************************************************************************
  *		wait_clipboard_mutex
  *
@@ -620,7 +633,6 @@ static BOOL wait_clipboard_mutex(void)
 {
     static const WCHAR prefix[] = L"__wine_clipboard_";
     WCHAR buffer[MAX_PATH + ARRAY_SIZE( prefix )];
-    HANDLE mutex;
 
     memcpy( buffer, prefix, sizeof(prefix) );
     if (!GetUserObjectInformationW( GetProcessWindowStation(), UOI_NAME,
@@ -630,13 +642,7 @@ static BOOL wait_clipboard_mutex(void)
         ERR( "failed to get winstation name\n" );
         return FALSE;
     }
-    mutex = CreateMutexW( NULL, TRUE, buffer );
-    if (GetLastError() == ERROR_ALREADY_EXISTS)
-    {
-        TRACE( "waiting for mutex %s\n", debugstr_w( buffer ));
-        WaitForSingleObject( mutex, INFINITE );
-    }
-    return TRUE;
+    return wait_named_mutex( buffer );
 }
 
 
@@ -696,6 +702,96 @@ static DWORD WINAPI clipboard_thread( void *arg )
     return 0;
 }
 
+static HANDLE fullscreen_process;
+
+static LRESULT WINAPI display_settings_restorer_wndproc( HWND hwnd, UINT message, WPARAM wp, LPARAM lp )
+{
+    TRACE( "got msg %04x wp %Ix lp %Ix\n", message, wp, lp );
+
+    switch(message)
+    {
+    case WM_USER + 0:
+        TRACE( "fullscreen process id %Iu.\n", lp );
+
+        if (fullscreen_process)
+        {
+            CloseHandle( fullscreen_process );
+            fullscreen_process = NULL;
+        }
+
+        if (lp)
+            fullscreen_process = OpenProcess( SYNCHRONIZE, FALSE, lp );
+
+        return 0;
+    }
+
+    return DefWindowProcW( hwnd, message, wp, lp );
+}
+
+static DWORD WINAPI display_settings_restorer_thread( void *param )
+{
+    static const WCHAR display_settings_restorer_classname[] = L"__wine_display_settings_restorer";
+    DISPLAY_DEVICEW device;
+    DWORD wait_result;
+    WNDCLASSW class;
+    ATOM atom;
+    MSG msg;
+    UINT i;
+
+    if (!wait_named_mutex( L"__wine_display_settings_restorer_mutex" )) return 0;
+
+    memset( &class, 0, sizeof(class) );
+    class.lpfnWndProc   = display_settings_restorer_wndproc;
+    class.lpszClassName = display_settings_restorer_classname;
+
+    if (!(atom = RegisterClassW( &class )) && GetLastError() != ERROR_CLASS_ALREADY_EXISTS)
+    {
+        ERR( "could not register display settings restorer window class err %lu\n", GetLastError() );
+        return 0;
+    }
+    if (!CreateWindowW( display_settings_restorer_classname, NULL, 0, 0, 0, 0, 0, HWND_MESSAGE, 0, 0, NULL ))
+    {
+        TRACE( "failed to create display settings restorer window err %lu\n", GetLastError() );
+        UnregisterClassW( MAKEINTRESOURCEW(atom), NULL );
+        return 0;
+    }
+
+    for (;;)
+    {
+        if (PeekMessageW( &msg, NULL, 0, 0, PM_REMOVE ))
+        {
+            if (msg.message == WM_QUIT)
+                break;
+            DispatchMessageW( &msg );
+            continue;
+        }
+
+        wait_result = MsgWaitForMultipleObjects( fullscreen_process ? 1 : 0, &fullscreen_process,
+                                                 FALSE, INFINITE, QS_ALLINPUT );
+        if (wait_result == WAIT_FAILED)
+            break;
+        if (!fullscreen_process || wait_result != WAIT_OBJECT_0)
+            continue;
+
+        WARN( "restoring display settings on process exit\n" );
+
+        memset( &device, 0, sizeof(device) );
+        device.cb = sizeof(device);
+        for (i = 0; EnumDisplayDevicesW( NULL, i, &device, 0 ); ++i)
+        {
+            if (!(device.StateFlags & DISPLAY_DEVICE_ATTACHED_TO_DESKTOP))
+                continue;
+
+            ChangeDisplaySettingsExW( device.DeviceName, NULL, NULL, 0, NULL );
+        }
+
+        CloseHandle( fullscreen_process );
+        fullscreen_process = NULL;
+    }
+
+    return 0;
+}
+
 static WNDPROC desktop_orig_wndproc;
 
 /* window procedure for the desktop window */
@@ -1123,6 +1219,8 @@ void manage_desktop( WCHAR *arg )
                       SWP_SHOWWINDOW );
         thread = CreateThread( NULL, 0, clipboard_thread, NULL, 0, &id );
         if (thread) CloseHandle( thread );
+        thread = CreateThread( NULL, 0, display_settings_restorer_thread, NULL, 0, &id );
+        if (thread) CloseHandle( thread );
         SystemParametersInfoW( SPI_SETDESKWALLPAPER, 0, NULL, FALSE );
         ClipCursor( NULL );
         initialize_display_settings( width, height );
-- 
2.43.0

